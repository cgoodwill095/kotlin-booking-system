openapi: 3.0.3
info:
  title: Striker Booking System (Name tbc) - OpenAPI 3.0
  description: |-
    Booking system application - Intended purpose is to allow for organisations to create football matches/tournaments, and have members of their organisation sign up to join for them.
    Additionally, the second key focus is for individuals looking for local matches to be able to find any that are needing players, and sign on to join them. This also means matches/teams should be able to create posts looking for players.
    Some useful links:
    - [The Booking Service repository](https://github.com/cgoodwill095/kotlin-booking-system)
    - [The source API definition for the booking system](TBD)
  termsOfService: TBD
  contact:
    email: goodwill.connor@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: player
    description: Everything about the user's player profile, as well as pulling data,
  - name: team
    description: Operations for creating & managing teams, as well as pulling data.
  - name: match
    description: Operations for creating & managing matches
  - name: tournament
    description: Operations for creating & managing tournaments
  - name: advert
    description: Operations for creating & managing adverts
  - name: user
    description: Operations for creating users & linking player profile to user account.
  - name: dropInRequest
    description: Operations for to create, and manage drop in requests

paths:
  
  /player:
    get:
      tags:
        - player
      summary: Finds players by status
      description: Return all players
      operationId: findPlayers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
      security:
        - petstore_auth:
            - read:player
    put:
      tags:
        - player
      summary: Update an existing player
      description: Update an existing player by Id
      operationId: updatePlayer
      requestBody:
        description: Update an existing player in the db
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
          application/xml:
            schema:
              $ref: '#/components/schemas/Player'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Player'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Invalid ID supplied
        '404':
          description: Player not found
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:player
            - read:plauer
    post:
      tags:
        - player
      summary: Add a new player to the system
      description: Add a new player to the system - to be done on the first login by a user
      operationId: addPlayer
      requestBody:
        description: Create a new player in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
          application/xml:
            schema:
              $ref: '#/components/schemas/Player'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Player'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:player
            - read:player
  /player/findByStatus/{status}:
    get:
      tags:
        - player
      summary: Finds players by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPlayersByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: string
            default: available
            enum:
            - active
            - inactive
            - deleted
            - banned
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:player
            - read:player
  /player/team/{playerId}{teamId}:
    post:
      tags:
        - player
      summary: Updates a player team status
      description: ''
      operationId: updatePlayerWithForm
      parameters:
        - name: playerId
          in: path
          description: ID of player that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: teamId
          in: path
          description: ID of team that player will link to
          required: true
          schema:
            type: integer
            format: int64        
        - name: status
          in: query
          description: Status of player application that needs to be updated
          schema:
            type: string
            enum:
            - applied
            - member
            - banned
            - rejected

      responses:
        '400':
          description: Invalid input
      security:
        - petstore_auth:
            - write:player
            - read:player
    delete:
      tags:
        - player
      summary: Deletes a player
      description: logical delete a player
      operationId: deletePlayer
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: playerId
          in: path
          description: Player id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid player value
      security:
        - petstore_auth:
            - write:players
            - read:players
  /team:
    post:
      tags:
        - team
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
          application/xml:
            schema:
              $ref: '#/components/schemas/Player'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /team/{id}:
    get:
      tags:
        - team
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      parameters:
        - name: id
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /team/player/{playerId}:
    post:
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: playerId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /match:
    get:
    put:
    post:
  /match/{id}:
    get:
    delete:
  /match/location/{point}:
    get:
  /match/player/{playerId}{matchId}{requestStatus}:
    post:
  /tournament:
    get:
    post:
  /tournament/{id}:
    get:
    put:
    delete:
  /tournament/team/{teamId}:
    put:
    post:
    delete:
  /tournament/player:
    get:
    put:
    post:
    delete:
  /advert:
    get:
    put:
    post:
    delete:
  /advert/{id}:
    get:
    put:
    post:
    delete:
  /organisation:
    get:
    put:
    post:
    delete:
  /organisation/player:
    get:
    put:
    post:
    delete:
  /organisation/team:
    get:
    put:
    post:
    delete:
  /organisastion/tournament:
    get:
    put:
    post:
    delete:
  /dropInRequest:
    get:
    put:
    post:
    delete:
  /dropInRequest/{id}:
    get:
    put:
    post:
    delete:
  /dropInRequest/match/{id}:
    get:
    put:
    post:
    delete:
  
components:
  schemas:
    Player:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 142
        status:
          type: string
          description: status of player
          example: active
          enum:
            - active
            - inactive
            - deleted
            - banned
      xml:
        name: player
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        name:
          type: string
          example: safc
        players:
          type: array
          xml:
            name: players
            wrapped: true
          items:
            $ref: '#/components/schemas/Player'
        status:
          type: string
          description: status of player
          example: active
          enum:
            - active
            - inactive
            - deleted
            - banned
        type:
          type: string
          description: type of matches
          example: active
          enum:
            - org
            - standard
            - dropIn        
      xml:
        name: team
    Match:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        location:
          type: string
          xml:
            name: location
            wrapped: true        
        teams:
          type: array
          xml:
            name: teams
            wrapped: true
          items:
            $ref: '#/components/schemas/Team'
        players:
          type: array
          xml:
            name: players
            wrapped: true
          items:
            $ref: '#/components/schemas/Player'
        creatorId:
          type: integer
          example: '94301'
        tournamentId:
          type: integer
          example: '94301'
        homeScore:
          type: integer
          example: '5'
        awayScore:
          type: integer
          example: '5'
        status:
          type: string
          description: status of match
          example: active
          enum:
            - active
            - inactive
            - deleted
            - cancelled
      xml:
        name: match
    Tournament:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Amateur League 2024
        description:
          type: string
          example: league for amateurs
        type:
          type: string
          description: type of matches
          example: active
          enum:
            - org
            - standard
            - dropIn
        teams:
          type: array
          xml:
            name: teams
            wrapped: true
          items:
            $ref: '#/components/schemas/Team'
        status:
          type: string
          description: status of player
          example: active
          enum:
            - active
            - inactive
            - deleted
            - banned
      xml:
        name: Tournament
    Organisation:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: theUser
        description:
          type: string
          example: John
        admins:
          type: array
          xml:
            name: players
            wrapped: true
          items:
            $ref: '#/components/schemas/Player'
        teams:
          type: array
          xml:
            name: team
            wrapped: true
          items:
            $ref: '#/components/schemas/Team'
        players:
          type: array
          xml:
            name: player
            wrapped: true
          items:
            $ref: '#/components/schemas/Player'
        matches:
          type: array
          xml:
            name: team
            wrapped: true
          items:
            $ref: '#/components/schemas/Match'
        tournaments:
          type: array
          xml:
            name: tournament
            wrapped: true
          items:
            $ref: '#/components/schemas/Tournament'
        status:
          type: string
          description: status of organisation
          example: active
          enum:
            - active
            - inactive
            - deleted
            - banned
      xml:
        name: organisation
    Advert:
      type: object
      properties:
        id:
          type: integer
          format: int64
        admins:
          type: array
          xml:
            name: players
            wrapped: true
          items:
            $ref: '#/components/schemas/Player'
        players:
          type: array
          xml:
            name: players
            wrapped: true
          items:
            $ref: '#/components/schemas/Player'
        matches:
          type: array
          xml:
            name: matches
            wrapped: true
          items:
            $ref: '#/components/schemas/Match'
        tournaments:
          type: array
          xml:
            name: tournament
            wrapped: true
          items:
            $ref: '#/components/schemas/Tournament'
      xml:
        name: advert
    Location:
      required:
        - name
        - pointValue
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        pointValue:
          type: object
          description: The object should be a point value
          example: doggie
        mapsLink:
          type: string
          example: https://maps.app.goo.gl/rK9BjSghCgEfJJ3K7
        status:
          type: string
          description: location status
          enum:
            - active
            - inactive
            - deleted
            - banned
      xml:
        name: location
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Connor
        status:
          type: string
          description: user status
          enum:
            - active
            - inactive
            - deleted
            - banned
        playerId:
          type: string
          format: int64
          example: 1
      xml:
        name: user
    DropInRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
        match:
          type: string
          example: Dogs
        status:
          type: string
          description: drop in status
          enum:
            - approved
            - rejected
            - cancelled
      xml:
        name: dropInRequest
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Player:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Player'
        application/xml:
          schema:
            $ref: '#/components/schemas/Player'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://bookingapp/oauth/authorize
          scopes:
            write:matches: modify matches in your account
            read:matches: view matches
    api_key:
      type: apiKey
      name: api_key
      in: header
      